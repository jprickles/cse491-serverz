2014-01-21  Jacob Prickett  <t@Titus-MacBook-Air-2.local>

 * Initialized repository, created server.py and README.
 * Edited server.py such that it produces the desired information
 * Detailed changes in ChangeLog
 * Edited server.py to perform functions to be able to test
 * Modified server.py to access and return different html for file, image,
      content 
 * Added links to '/' to access file, image, directory
 * Updated test-server.py so that all request URLs are tested
 * Modify server.py to handle GET and POST separately
 
 1.30.14
 -------------HW3----------------
 * Modified the organization of code
 * Added form features
 * Added URL Parsing Features
 
 2.6.14
 -------------HW4----------------
 * New form of type multipart/form-data
 * Templating used to generate html
 * Requests of variable size work correctly
 
 2.12.14
 -------------HW5----------------
 * Added template inheritance
 * WSGI App Additions
 
 2.22.14
 -------------HW6----------------
 * Wrote functions that serve file/image
 * Works with Three Quixote Demo Apps
 * Implemented WSGI Validator

 2.25.14
 -------------HW7----------------
 * Added Cooking Header Handling
 * Updated imageapp and implemented in own server.py
 * Adjusted tests for nosetests
 
 3.19.14
 -------------HW8----------------
 * Added command line arguments for execution specifying port/app to run
 * Ran and implemented own twill test that successfully passed for my own server
 * Select from the project list number 5
 *     successfully implemented a new page for the image app that displays all current
 *     images that are uploaded to the server. This was done by creating a new page to
 *     render that was passed the dictionary of all current pictures, then iterating through
 *     this using a jinja, each image_num was passed via parsing the incoming request for 
 *     the image for the 'special' variable that was used in calling the get_image app 
 *     ~NOTE: Implemented on imageapp, but was unsure of wither it should be on my app or not.
 
  3.25.14
 -------------HW9----------------
 * Implemented the Quotes application into server.py
 * Implemented the Chat application as well into server.py
 *     -Also added timestamp into chat window by taking timestamp and formatting it into 
 *          human readable time string
 * Chose Project #4 which was to add TIFF and JPEG image handling to the imageapp. This was done
 *     by first altering the image.py function add_image to allow another parameter to be passed which
 *     would be the type of the image, storing both in a list. Next, in root.py upload recieve was 
 *     altered such that it took the full file path from the form and extracted the file 
 *     type from there. Then checking for differences like "jpg" and "jpeg." Next, the get image
 *     method had to be altered to adjust for the different response types based on the image. 
 *     Which is basically the second element in the list, returning the first which is the data portion
 *     of the image. Similarly using this method, I altered the page in which it displayed a list of 
 *     images that had been uploaded, allowing for this functionality to work as well. 
 *     !! Only issue that arose was displaying the TIFF images, they are not supported in chrome or firefox 
 
  -------------HW10----------------
 * Implemented commenting on image that is located on the home page
 *		found assistance online in functionality of comment box
 * Also placed a limit on the upload size using JavaScript, with a limit of
 *      5 MB. This functionally works correct in determining size and notifying user
 *      but had issues with actually stopping the upload and redirecting browser. Many attempts were
 *      made to find a solution but I am going to continue to figure out this issue.
 
   4.9.14
 -------------HW11----------------
 * Integrated the 'Cookie App' into server.py --> Runs on '-A cookie'
 * Removed dictionary storage of images and implemented sqlite3, allowing for data persistance [Project 16]
 * Added image metadata storage, uploading, and retrieval. The information is entered when the user
 *      uploads an image and has the ability to name the picture and also give a description. These are
 *      are then displayed below the image when the user views all images in the database as a list.
 * Piggy backing off of the previous choice, I implemented a search page that functions as a single search bar
 *      that queries the database so that it finds all similar results to the entered string. 

   4.15.14
 -------------HW12----------------
 * Implemented Project 3 and swiped a template from oswd.org and altered the templates so the styles could be shown 
 * Project #22 where the resizing of the images is done on the server size for a thumbnail page
 *     this is done using pillow
 * Implemented Project 27 allowing a ranking system to be implemented. The ranking system is linked to the thumbnail page
 *     such that when you click and view the full size image, it allows upvote/downvote of image ranking. This was done 
 *     by adding another field into the database which is the score. Then allowing for functions to be called that 
 *     increment and decrement the score. Javascript is used to update the fields live as the user increases/decreases the score. 
 
								 -------------Totals----------------
								 * Project 5                  5
								 * Project 4                  5
								 * Project 8                  5
								 * Project 11                 5
								 * Project 16                 5
								 * Project 6                  5
								 * Project 7                  5
								 * Project 3                  5
								 * Project 22                 5
 								 * Project 27                 5
								 ________________________________
								 Total:                      50
 